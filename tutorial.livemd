# Ducker Tutorial

```elixir
Mix.install([
  {:ducker, "~> 0.3.0"},
  {:adbc, "~> 0.7.9"},
  {:kino, "~> 0.16.0"},
  {:kino_db, "~> 0.3.0"},
  {:kino_explorer, "~> 0.1.24"}
])
```

## Section

Create connection to DuckDB in-memory database

```elixir
alias Adbc.Connection, as: Conn

:ok = Adbc.download_driver!(:duckdb)
{:ok, db} = Kino.start_child({Adbc.Database, driver: :duckdb})
{:ok, conn} = Kino.start_child({Adbc.Connection, database: db})

# This example uses files in ducker's `priv/example`
work_dir = Path.join(:code.priv_dir(:ducker), "example")
```

You can attach to DuckDB database file

```sql
ATTACH '/path/to/your.db' AS file_db;
USE file_db;
```

<!-- livebook:{"break_markdown":true} -->

Initialize Ducker to create SQL macros and tables needed by Ducker.

```elixir
ducker = Ducker.new!(conn, work_dir)
```

```elixir
# clear validation results
Ducker.reset_test_result!(ducker)

# run query from `sources` directory
# (relative to `work_dir`)
Ducker.execute_query_from_dir(ducker, "sources")
|> IO.inspect(label: "Executed queries")

# run data tests from `sources` directory
Ducker.execute_test_from_dir(ducker, "sources")
|> IO.inspect(label: "Executed tests")

:ok
```

View validation result

<!-- livebook:{"attrs":"eyJjYWNoZV9xdWVyeSI6dHJ1ZSwiY29ubmVjdGlvbiI6eyJ0eXBlIjoiZHVja2RiIiwidmFyaWFibGUiOiJjb25uIn0sImRhdGFfZnJhbWVfYWxpYXMiOiJFbGl4aXIuRXhwbG9yZXIuRGF0YUZyYW1lIiwicXVlcnkiOiJzZWxlY3QgKiBmcm9tIGR1Y2tlcl92YWxpZGF0ZV9yZXN1bHRcbndoZXJlIGZhaWxfY291bnQgPiAwIiwicmVzdWx0X3ZhcmlhYmxlIjoicmVzdWx0MiIsInRpbWVvdXQiOm51bGx9","chunks":null,"kind":"Elixir.KinoDB.SQLCell","livebook_object":"smart_cell"} -->

```elixir
result2 =
  Explorer.DataFrame.from_query!(
    conn,
    ~S"""
    select * from ducker_data_test_result
    where fail_count > 0
    """,
    []
  )
```

<!-- livebook:{"attrs":"eyJjYWNoZV9xdWVyeSI6dHJ1ZSwiY29ubmVjdGlvbiI6eyJ0eXBlIjoiZHVja2RiIiwidmFyaWFibGUiOiJjb25uIn0sImRhdGFfZnJhbWVfYWxpYXMiOiJFbGl4aXIuRXhwbG9yZXIuRGF0YUZyYW1lIiwicXVlcnkiOiJTVU1NQVJJWkUgbXRjYXJzICIsInJlc3VsdF92YXJpYWJsZSI6InJlc3VsdCIsInRpbWVvdXQiOm51bGx9","chunks":null,"kind":"Elixir.KinoDB.SQLCell","livebook_object":"smart_cell"} -->

```elixir
result = Explorer.DataFrame.from_query!(conn, ~S"SUMMARIZE mtcars ", [])
```
